<?xml version="1.0"?>
<robot name="krytn" xmlns:xacro="http://www.ros.org/wiki/xacro">

  <xacro:property name="wheel_r" value="0.1" />
  <xacro:property name="wheel_xpos" value="0.11" />
  <xacro:include filename="$(find krytn_cafe)/models/krytn/inertial.xacro" />


  <xacro:macro name="low_friction">
              <mu>0.1</mu>
              <mu1>0.1</mu1> 
              <mu2>0.1</mu2>
              <slip1>0</slip1>
              <slip2>0</slip2>
  </xacro:macro>


  <xacro:macro name="high_friction">
                <mu>0.5</mu>
                <mu1>0.5</mu1> 
                <mu2>0.5</mu2>
                <minDepth>0.005</minDepth>
                <kp>1e8</kp>
        
  </xacro:macro>


 <link name="base_footprint"/>
  <joint name="base_footprint_joint" type="fixed">
    <parent link="base_footprint"/>
    <child link="base_link"/>
    <origin xyz="0 0 ${wheel_r}" rpy="0 0 0"/>
  </joint>
  <!-- Base Link -->
  <link name="base_link">
    <origin xyz="-0.25 0 ${0.03}" rpy="0 0 0" />  

    <visual>
      <origin xyz="${-wheel_xpos} 0 ${-wheel_r+0.071}" rpy="0 0 0" />
      <geometry>
        <mesh filename="$(find krytn_cafe)/models/krytn/meshes/magni_body.dae" />
      </geometry>
    </visual>
       
    <collision>
	    <origin xyz="${-wheel_xpos} 0 ${-wheel_r+0.151}" rpy="0 0 0" />
      <geometry>
        <box size="0.398 0.268 0.160"/>
      </geometry>
    </collision>
  
    <collision>
      <origin xyz="${-wheel_xpos-0.026} 0 ${-wheel_r+0.248}" rpy="0 0 0" />
      <geometry>
        <box size="0.375 0.268 0.034"/>
      </geometry>

    </collision>
  
    <collision>
      <origin xyz="${-wheel_xpos-0.169} 0.169 ${-wheel_r+0.106}" rpy="0 0 0" />
      <geometry>
        <box size="0.1 0.07 0.07"/>
      </geometry>
    </collision>
  
    <collision>
      <origin xyz="${-wheel_xpos-0.169} -0.169 ${-wheel_r+0.106}" rpy="0 0 0" />
      <geometry>
        <box size="0.1 0.07 0.07"/>
      </geometry>
    </collision>

    
    <xacro:box_inertial_with_origin  x="0.398" y="0.221" z="0.150" mass="10.0">
      <origin xyz="-0.15 0 0.03" rpy="0 0 0" /> 
    </xacro:box_inertial_with_origin>

  </link>

  <gazebo reference="base_link">
  <xacro:low_friction/>
  </gazebo>

 <!-- Macro for defining wheels -->
  <xacro:macro name="wheel" params="prefix reflect">
    <link name="${prefix}_wheel">
           
      <collision>
        <origin xyz="${0.033*reflect} 0 0" rpy="0 ${pi/2} 0" />
        <geometry>
          <cylinder radius="${wheel_r}" length="0.01"/>
        </geometry>
      </collision>
   

      <visual>
        <origin xyz="${-0.071*reflect} 0 0" rpy="0 ${(reflect-1)*pi/2} 0" />
        <geometry>
          <mesh filename="$(find krytn_cafe)/models/krytn/meshes/front_wheel.dae" />
        </geometry>
      </visual>


      <xacro:cylinder_inertial_with_origin radius="${wheel_r}" length="0.05" mass="1.34">
        <origin xyz="0 0 0" rpy="0 ${pi/2} 0" />
      </xacro:cylinder_inertial_with_origin>
    </link>

    

    <joint name="${prefix}_wheel_joint" type="continuous">
      <axis xyz="1 0 0" rpy="0 0 0" />
      <parent link="base_link"/>
      <child link="${prefix}_wheel"/>
      <origin xyz="0 ${0.163*reflect} 0" rpy="0 0 ${pi/2}"/>
      <dynamics damping="0.2" friction="0.8"/>
      
      
    </joint>

    <gazebo reference="${prefix}_wheel">
    <xacro:high_friction/>
    </gazebo>

  </xacro:macro>

  <!--- create wheels -->
  <xacro:wheel prefix="left" reflect="1"/>
  <xacro:wheel prefix="right" reflect="-1"/>


  <!-- Macro for defining caster wheels -->
  <xacro:macro name="caster_wheel" params="prefix reflect">
    <link name="${prefix}_caster_wheel">
      <origin xyz="-0.37 ${reflect*0.169} ${-wheel_r+0.04}" rpy="0 0 0" />
      <collision>
        <origin xyz="-0.27 ${reflect*0.169} ${-wheel_r+0.04}" rpy="0 0 0" />
        <geometry>
          <sphere radius="0.04"/>
        </geometry>        
       
      </collision>
      <visual>
        <origin xyz="-0.25 ${reflect*0.169} 0" rpy="0 0 ${pi}" />

        <geometry>
          <mesh filename="$(find krytn_cafe)/models/krytn/meshes/caster_wheel.dae" />
        </geometry>
      </visual>

      <!-- removing inertia of caster wheels so that base inertial is not tilted. 
      <xacro:cylinder_inertial_with_origin radius="${wheel_r}" length="0.05" mass="3.34">
          <origin xyz="0 0 0" rpy="0 ${pi/2} 0" />
       </xacro:cylinder_inertial_with_origin> 
       -->
    </link>



    <joint name="${prefix}_caster_wheel_joint" type="fixed">
      <parent link="base_link"/>
      <child link="${prefix}_caster_wheel"/>
       
    </joint>


  <gazebo reference="${prefix}_caster_wheel">
     <xacro:low_friction/>
  </gazebo>



  </xacro:macro>

    <!-- and caster wheels )-->
  <xacro:caster_wheel prefix="left" reflect="1"/>
  <xacro:caster_wheel prefix="right" reflect="-1"/>


<!-- add a laser -->
  <link name="laser_link">
    <visual name="visual">
      <geometry>
          <cylinder length="0.05" radius="0.05"/>
       </geometry>
    </visual>
    <collision>
      <geometry>
         <cylinder length="0.05" radius="0.05"/>
      </geometry>
    </collision>
   
  </link>

  <joint name="laser_link_joint" type="fixed">
    <parent link="base_link"/>
    <child link="laser_link"/>
    <origin rpy="0 0 0" xyz="-0.093 0 0.198"/>

  </joint>


  <ros2_control name="GazeboSystem" type="system">
    <hardware>
      <plugin>gazebo_ros2_control/GazeboSystem</plugin>
    </hardware>
    <joint name="left_wheel_joint">
      <command_interface name="velocity">
        <param name="min">-1</param>
        <param name="max">1</param>
      </command_interface>
      <state_interface name="position"/>
      <state_interface name="velocity"/>
    </joint>
    <joint name="right_wheel_joint">
      <command_interface name="velocity">
        <param name="min">-1</param>
        <param name="max">1</param>
      </command_interface>
      <state_interface name="position"/>
      <state_interface name="velocity"/>
    </joint>
  </ros2_control>

    <gazebo reference="left_wheel">
        <mu1>1.0</mu1>
        <mu2>1.0</mu2>
        <fdir1>0 0 1</fdir1>
        <minDepth>0.005</minDepth>
        <kp>1e8</kp>
    </gazebo>
    <gazebo reference="right_wheel">
        <mu1>1.0</mu1>
        <mu2>1.0</mu2>
        <fdir1>0 0 1</fdir1>
        <minDepth>0.005</minDepth>
        <kp>1e8</kp>
    </gazebo>

    <gazebo reference="left_caster_wheel">
        <mu1>0.0</mu1>
        <mu2>0.0</mu2>
        <minDepth>0.005</minDepth>
        <kp>1e8</kp>
    </gazebo>
    <gazebo reference="right_caster_wheel">
        <mu1>0.0</mu1>
        <mu2>0.0</mu2>
        <minDepth>0.005</minDepth>
        <kp>1e8</kp>
    </gazebo>

    <gazebo reference="laser_link">
        <mu1>1.0</mu1>
        <mu2>1.0</mu2>
        <fdir1>0 0 1</fdir1>
        <minDepth>0.005</minDepth>
        <kp>1e8</kp>
    </gazebo>


<gazebo reference="laser_link">
    <sensor type="ray" name="laser_sensor">
      <pose>0 0 0 0 0 0</pose>
      <visualize>true</visualize>
      <update_rate>40</update_rate>
      <ray>
        <scan>
          <horizontal>
            <samples>720</samples>
            <resolution>1</resolution>
            <min_angle>-1.570796</min_angle>
            <max_angle>1.570796</max_angle>
          </horizontal>
        </scan>
        <range>
          <min>0.10</min>
          <max>30.0</max>
          <resolution>0.01</resolution>
        </range>
        <noise>
          <type>gaussian</type>
          <!-- Noise parameters based on published spec for Hokuyo laser
               achieving "+-30mm" accuracy at range < 10m.  A mean of 0.0m and
               stddev of 0.01m will put 99.7% of samples within 0.03m of the true
               reading. -->
          <mean>0.0</mean>
          <stddev>0.01</stddev>
        </noise>
      </ray>
      <plugin name="scan" filename="libgazebo_ros_ray_sensor.so">
      <ros>
        <remapping>~/out:=scan</remapping>
      </ros>
      <output_type>sensor_msgs/LaserScan</output_type>
      <frame_name>laser_link</frame_name>
    </plugin>
    </sensor>
  </gazebo>

  <gazebo>
    <!-- Joint state publisher -->
    <plugin filename="libgazebo_ros2_control.so" name="gazebo_ros2_control">
      <parameters>$(find krytn_cafe)/config/diff_drive_controller.yaml</parameters>
    </plugin>
  </gazebo>

  
<!-- add a realsense -->

  <link name="realsense_link" >
  </link>
  <joint name="realsense_joint" type="fixed" >
    <parent link="base_link"/>
    <child link="realsense_link"/>
    <origin rpy="0 0 0" xyz="0 0 0.6"/>
  </joint>

  <link name="realsense_depth_link">
    <visual name="visual">
      <geometry>
          <cylinder length="0.05" radius="0.05"/>
       </geometry>
    </visual>
    <collision>
      <geometry>
         <cylinder length="0.05" radius="0.05"/>
      </geometry>
    </collision>
   
  </link>
   
  <joint name="realsense_depth_joint" type="fixed">
    <parent link="realsense_link"/>
    <child link="realsense_depth_link"/>
    <origin rpy="${-pi/2} 0 ${-pi/2}" xyz="0 0 0"/>

  </joint>


  <gazebo reference="realsense_link">
    <sensor type="depth" name="camera1">
    <visualize>true</visualize>

    <update_rate>2</update_rate>
    <camera name="camera_name">
    
      <horizontal_fov>1.3962634</horizontal_fov>
      <image>
        <width>640</width>
        <height>480</height>
        <format>R8G8B8</format>
      </image>
      <clip>
        <near>0.02</near>
        <far>300</far>
      </clip>
      <noise>
        <type>gaussian</type>
        <!-- Noise is sampled independently per pixel on each frame.
              That pixel's noise value is added to each of its color
              channels, which at that point lie in the range [0,1]. -->
        <mean>0.0</mean>
        <stddev>0.007</stddev>
      </noise>
    </camera>

    <plugin name="depth_camera_controller" filename="libgazebo_ros_camera.so">
        <baseline>0.2</baseline>
        <alwaysOn>true</alwaysOn>
        <updateRate>0.0</updateRate>
        <frame_name>realsense_depth_link</frame_name>
        <pointCloudCutoff>0.5</pointCloudCutoff>
        <pointCloudCutoffMax>3.0</pointCloudCutoffMax>
        <distortionK1>0</distortionK1>
        <distortionK2>0</distortionK2>
        <distortionK3>0</distortionK3>
        <distortionT1>0</distortionT1>
        <distortionT2>0</distortionT2>
        <CxPrime>0</CxPrime>
        <Cx>0</Cx>
        <Cy>0</Cy>
        <focalLength>0</focalLength>
        <hackBaseline>0</hackBaseline>
      </plugin> 

  </sensor>
</gazebo>

</robot>
